'use strict'

// tests for authorization
// Generated by serverless-jest-plugin

const mod = require('../aws/authorization')
const modAux = require('../aws/authentication')

const jestPlugin = require('serverless-jest-plugin')
const lambdaWrapper = jestPlugin.lambdaWrapper
const wrapped = lambdaWrapper.wrap(mod, { handler: 'handler' })
const wrappedAux = lambdaWrapper.wrap(modAux, { handler: 'handler' })

describe('authorization', () => {
  beforeAll((done) => {
//  lambdaWrapper.init(liveFunction) // Run the deployed lambda

    done()
  })

  it('implement tests here', () => {
    const methodArn = 'arn:aws:lambda:us-east-1:00000000:api'
    const failureEvent = {
      methodArn,
      authorizationToken: null
    }

    return wrapped.run(failureEvent)
      .then(response => {
        const denyPolicy = {
          principalId: 'user',
          policyDocument: {
            Version: '2012-10-17',
            Statement: [{
              Action: 'execute-api:Invoke',
              Effect: 'Deny',
              Resource: methodArn
            }]
          },
          context: {}
        }

        expect(response).toEqual(denyPolicy)

        const eventAux = {
          body: JSON.stringify({
            username: 'admin',
            password: 'admin'
          })
        }

        return wrappedAux.run(eventAux)
          .then(response => {
            const data = JSON.parse(response.body)
            const successEvent = {
              methodArn,
              authorizationToken: `Bearer ${data.token}`
            }

            return wrapped.run(successEvent)
              .then((response) => {
                const allowPolicy = {
                  principalId: 'user',
                  policyDocument: {
                    Version: '2012-10-17',
                    Statement: [{
                      Action: 'execute-api:Invoke',
                      Effect: 'Allow',
                      Resource: methodArn
                    }]
                  },
                  context: {}
                }

                expect(response).toEqual(allowPolicy)
              })
          })
      })
  })
})
